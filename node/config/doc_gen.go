// Code generated by github.com/SaoNetwork/sao-node/gen/cfgdoc. DO NOT EDIT.

package config

type DocField struct {
	Name    string
	Type    string
	Comment string
}

var Doc = map[string][]DocField{
	"API": []DocField{
		{
			Name: "ListenAddress",
			Type: "string",

			Comment: `Binding address for the Sao Node API`,
		},
		{
			Name: "Timeout",
			Type: "time.Duration",

			Comment: ``,
		},
		{
			Name: "EnablePermission",
			Type: "bool",

			Comment: ``,
		},
	},
	"Cache": []DocField{
		{
			Name: "EnableCache",
			Type: "bool",

			Comment: ``,
		},
		{
			Name: "CacheCapacity",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "ContentLimit",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "RedisConn",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "RedisPassword",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "RedisPoolSize",
			Type: "int",

			Comment: ``,
		},
		{
			Name: "MemcachedConn",
			Type: "string",

			Comment: ``,
		},
	},
	"Chain": []DocField{
		{
			Name: "Remote",
			Type: "string",

			Comment: `remote connection string`,
		},
		{
			Name: "WsEndpoint",
			Type: "string",

			Comment: `websocket endpoint`,
		},
		{
			Name: "TxPoolSize",
			Type: "uint",

			Comment: `tx address pool size`,
		},
	},
	"Common": []DocField{
		{
			Name: "Chain",
			Type: "Chain",

			Comment: ``,
		},
		{
			Name: "Libp2p",
			Type: "Libp2p",

			Comment: ``,
		},
		{
			Name: "Module",
			Type: "Module",

			Comment: ``,
		},
		{
			Name: "Transport",
			Type: "Transport",

			Comment: ``,
		},
	},
	"Indexer": []DocField{
		{
			Name: "DbPath",
			Type: "string",

			Comment: `indexer db path`,
		},
		{
			Name: "ListenAddress",
			Type: "string",

			Comment: `Binding address for the graphsql service`,
		},
	},
	"Ipfs": []DocField{
		{
			Name: "Conn",
			Type: "string",

			Comment: `ipfs connection string`,
		},
	},
	"Libp2p": []DocField{
		{
			Name: "ListenAddress",
			Type: "[]string",

			Comment: `Binding address for the libp2p host - 0 means random port.
Format: multiaddress; see https://multiformats.io/multiaddr/`,
		},
		{
			Name: "AnnounceAddresses",
			Type: "[]string",

			Comment: ``,
		},
		{
			Name: "PublicAddress",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "IntranetIpEnable",
			Type: "bool",

			Comment: ``,
		},
		{
			Name: "ExternalIpEnable",
			Type: "bool",

			Comment: ``,
		},
	},
	"Module": []DocField{
		{
			Name: "GatewayEnable",
			Type: "bool",

			Comment: `Enable gateway module`,
		},
		{
			Name: "StorageEnable",
			Type: "bool",

			Comment: `Enable storage module`,
		},
		{
			Name: "IndexerEnable",
			Type: "bool",

			Comment: `Enable indexer module`,
		},
	},
	"Node": []DocField{
		{
			Name: "Cache",
			Type: "Cache",

			Comment: ``,
		},
		{
			Name: "SaoHttpFileServer",
			Type: "SaoHttpFileServer",

			Comment: ``,
		},
		{
			Name: "Api",
			Type: "API",

			Comment: ``,
		},
		{
			Name: "Storage",
			Type: "Storage",

			Comment: ``,
		},
		{
			Name: "SaoIpfs",
			Type: "SaoIpfs",

			Comment: ``,
		},
		{
			Name: "Indexer",
			Type: "Indexer",

			Comment: ``,
		},
	},
	"SaoHttpFileServer": []DocField{
		{
			Name: "Enable",
			Type: "bool",

			Comment: ``,
		},
		{
			Name: "HttpFileServerAddress",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "EnableHttpFileServerLog",
			Type: "bool",

			Comment: ``,
		},
		{
			Name: "HttpFileServerPath",
			Type: "string",

			Comment: ``,
		},
		{
			Name: "TokenPeriod",
			Type: "time.Duration",

			Comment: ``,
		},
		{
			Name: "CacheSize",
			Type: "int",

			Comment: ``,
		},
	},
	"SaoIpfs": []DocField{
		{
			Name: "Enable",
			Type: "bool",

			Comment: `Enable in process ipfs instance`,
		},
	},
	"Storage": []DocField{
		{
			Name: "AcceptOrder",
			Type: "bool",

			Comment: `if this node is open to accept order shards`,
		},
		{
			Name: "Ipfs",
			Type: "[]Ipfs",

			Comment: ``,
		},
	},
	"Transport": []DocField{
		{
			Name: "TransportListenAddress",
			Type: "[]string",

			Comment: ``,
		},
		{
			Name: "StagingSapceSize",
			Type: "int64",

			Comment: ``,
		},
	},
}
