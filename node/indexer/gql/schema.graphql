"""
The `Uint64` scalar type represents a uint64.
"""
scalar Uint64

schema {
    query: RootQuery
}

type Job {
    ID: ID!
    Description: String!
    Status: String!
}

type JobList {
    totalCount: Int!
    Jobs: [Job]!
    more: Boolean!
}

type Metadata {
    dataId: ID!
    owner: String!
    alias: String!
    groupId: String!
    orderId: String!
    tags: String!
    cid: String!
    commits: String!
    extendInfo: String!
    update: Boolean!
    commit: String!
    rule: String!
    duration: Int!
    createdAt: Int!
    readonlyDids: String!
    readwriteDids: String!
    status: Int!
    orders: String!
    size: String!
    access: String!
}

type MetadataList {
    totalCount: Int!
    Metadatas: [Metadata]!
    more: Boolean!
}

type CommitInfo {
    commitId: String!
    size: String!
    createdAt: Int!
}

type Node {
    creator: String!
    peer: String!
    reputation: Float!
    status: Int!
    lastAliveHeight: Int!
    txAddresses: String!
    role: Int!
    validator: String!
    isGateway: Boolean!
    isSP: Boolean!
    isIndexer: Boolean!
    isAlive: Boolean!
    ipAddress: String!
    lastAliveTime: Int!
    name: String!
    details: String!
    identity: String!
    securityContact: String!
    website: String!
}

type NodeList {
    totalCount: Int!
    nodes: [Node]!
    more: Boolean!
}

type NodeCountInfo {
    totalGateway: Int!
    onlineGateway: Int!
    offlineGateway: Int!
    totalSP: Int!
    onlineSP: Int!
    offlineSP: Int!
}

type Order {
    id: ID!
    creator: String!
    owner: String!
    provider: String!
    cid: String!
    duration: Int!
    status: String!
    replica: Int!
    amount: String!
    size: String!
    operation: String!
    createdAt: Int!
    timeout: Int!
    dataId: String!
    commit: String!
    unitPrice: String!
    orderShards: [OrderShard]!
}

enum OrderByColumn {
    ID
    CREATOR
    PROVIDER
    DURATION
    STATUS
    REPLICA
    AMOUNT
    SIZE
    CREATED_AT
}

enum SortOrder {
    ASC
    DESC
}

input OrderByInput {
    column: OrderByColumn!
    order: SortOrder!
}

type OrderList {
    totalCount: Int!
    orders: [Order!]!
    more: Boolean!
}

type Group {
    groupId: String!
    lastChange: Int!
    files: Int!
}

type GroupList {
    groups: [Group]!
}

type UserSummary {
    groupCount: Int!
    totalFiles: Int!
    expiration: Int!
    totalStorage: String!
    totalSpent: String!
    balance: String!
}

type OrderShard {
    shardId: Int!
    status: Int!
}

type Shard {
    ID: ID!
    ShardId: Uint64!
    OrderId: Uint64!
    Sp: String!
    Cid: String!
}

type ShardList {
    totalCount: Int!
    Shards: [Shard]!
    more: Boolean!
}

type RootQuery {
    """Get Job by ID"""
    job(id: ID!): Job

    """Get all Jobs"""
    jobs(query: String): JobList!

    """Get Metadata by ID"""
    metadata(id: ID!): Metadata

    """Get all Metadatas"""
    metadatas(query: String, owner: String, groupId: String, limit: Int, offset: Int): MetadataList!

    """Get Commits"""
    commits(dataId: String!): [CommitInfo!]!

    """Get all Nodes"""
    nodes(isActive: Boolean, isGateway: Boolean, isSP: Boolean): NodeList!

    """Get Node Count"""
    countNodes: NodeCountInfo!

    """Get Order by ID"""
    order(id: ID!): Order

    """Get all Orders"""
    orders(owner: String, limit: Int, offset: Int, orderBy: OrderByInput): OrderList!

    """Get Group List"""
    groupList(owner: String!): GroupList!

    """Get user summary by owner"""
    userSummary(owner: String!, address: String): UserSummary!

    """Get Shard by ID"""
    shard(id: ID!): Shard

    """Get all Shards"""
    shards(query: String): ShardList!

}