"""
The `Uint64` scalar type represents a uint64.
"""
scalar Uint64

schema {
    query: RootQuery
}

type Job {
    ID: ID!
    Description: String!
    Status: String!
}

type JobList {
    totalCount: Int!
    Jobs: [Job]!
    more: Boolean!
}

type Metadata {
    ID: ID!
    Did: String!
    DataId: String!
    Alias: String!
    Cid: String!
    GroupId: String!
    Version: String!
    Size: Int!
    Expiration: Uint64!
    Readers: String!
    Writers: String!
}

type MetadataList {
    totalCount: Int!
    Metadatas: [Metadata]!
    more: Boolean!
}

type Shard {
    ID: ID!
    ShardId: Uint64!
    OrderId: Uint64!
    Sp: String!
    Cid: String!
}

type ShardList {
    totalCount: Int!
    Shards: [Shard]!
    more: Boolean!
}

type UserProfile {
    ID: ID!
    DataId: String!
    CreatedAt: Uint64!
    UpdatedAt: Uint64!
    Did: String!
    EthAddr: String!
    Avatar: String!
    Username: String!
    FollowingCount: Int!
    Twitter: String!
    Youtube: String!
    Bio: String!
    Banner: String!
    FollowingDataId: String!
    IsFollowing: Boolean!
}

type Verse {
    ID: ID!
    DataId: String!
    CreatedAt: Uint64!
    FileIDs: String!
    Owner: String!
    Price: String!
    Digest: String!
    Scope: Int!
    Status: String!
    NftTokenID: String!
    FileType: String!
    IsPaid: Boolean!
    NotInScope: Int!
    CommentCount: Int!
    LikeCount: Int!
    HasFollowedOwner: Boolean!
    HasLiked: Boolean!
    OwnerEthAddr: String!
    OwnerAvatar: String!
    OwnerUsername: String!
    OwnerBio: String!
}

type FileInfo {
    ID: ID!
    DataId: String!
    CreatedAt: Uint64!
    FileName: String!
    ContentType: String!
    FileDataID: String!
    Owner: String!
    FileCategory: String!
    VerseId: String!
}

type UserFollowing {
    ID: ID!
    DataId: String!
    CreatedAt: Uint64!
    UpdatedAt: Uint64!
    ExpiredAt: Uint64!
    Follower: String!
    Following: String!
    Status: String!
    ToPay: Boolean!
    EthAddr: String!
    Avatar: String!
    Username: String!
    Bio: String!
}

type ListingInfo {
    ID: ID!
    DataId: String!
    Price: String!
    TokenId: String!
    ItemDataId: String!
    ChainType: String!
    Time: Uint64!
}

type FollowingResult {
    followings: [UserFollowing!]!
    count: Int!
}

type PurchaseOrderList {
    totalCount: Int!
    PurchaseOrders: [PurchaseOrder!]!
    more: Boolean!
}

type PurchaseOrder {
    ID: ID!
    DataID: String!
    OrderID: Uint64!
    ItemDataID: String!
    BuyerDataID: String!
    OrderTxHash: String!
    ChainType: String!
    Price: String!
    Time: Uint64!
    Type: Int!
    ExpireTime: Uint64!
}

type VerseComment {
    ID: ID!
    DataId: String!
    CreatedAt: Uint64!
    UpdatedAt: Uint64!
    VerseID: String!
    Owner: String!
    Comment: String!
    ParentID: String!
    likeCount: Int!
    OwnerEthAddr: String!
    OwnerAvatar: String!
    OwnerUsername: String!
    OwnerBio: String!
}

type Notification {
    BaseDataID: String!
    CreatedAt: Uint64!
    UpdatedAt: Uint64!
    FromUser: String!
    ToUser: String!
    MessageType: Int!
    Message: String!
    Status: String!
}

type UnreadCountInfo {
    MessageType: String!
    UnreadCount: Int!
}

type NotificationsInfo {
    Items: [Notification!]!
    TotalCount: Int!
    UnreadCounts: [UnreadCountInfo!]!
}

type RootQuery {
    """Get Job by ID"""
    job(id: ID!): Job

    """Get all Jobs"""
    jobs(query: String): JobList!

    """Get Metadata by ID"""
    metadata(id: ID!): Metadata

    """Get all Metadatas"""
    metadatas(query: String): MetadataList!

    """Get Shard by ID"""
    shard(id: ID!): Shard

    """Get all Shards"""
    shards(query: String): ShardList!

    """Get UserProfile by ID or DID or EthAddress"""
    userProfile(id: ID, did: String, ethAddress: String): UserProfile

    """Get most followed users"""
    suggestedUsers(userDataId: String): [UserProfile!]!

    """Get Verse by ID"""
    verse(id: ID, nftTokenID: String, userDataId: String): Verse

    """Get Verses with multiple filtering options"""
    verses(owner: String, price: String, createdAt: Uint64, status: String, userDataId: String, limit: Int, offset: Int): [Verse!]!

    """Get suggested Verses for user"""
    subscribedVerses(userDataId: String
        limit: Int
        offset: Int): [Verse!]!

    """Get Verses by verse ID list"""
    versesByIds(ids: [String!]!, userDataId: String): [Verse!]!

    """Get FileInfo by ID"""
    fileInfo(id: ID!, userDataId: String): FileInfo

    """Get FileInfos by verse ID list"""
    fileInfosByVerseIds(verseIds: [String!]!, userDataId: String): [FileInfo!]!

    """Get File by ID"""
    file(id: ID!, userDataId: String, getFromFileInfo:Boolean): String

    """Get Followings by FollowingDataId"""
    followings(followingDataId: String!, mutualWithId: String, limit: Int, offset: Int): FollowingResult!

    """Get Followed List by FOLLOWER"""
    followedList(follower: String!, isExpired: Boolean!, limit: Int, offset: Int): FollowingResult!

    """Get ListingInfo by DataId or TokenId"""
    listingInfo(dataId: String, tokenId: String): ListingInfo

    """Get all PurchaseOrders"""
    purchaseOrders(itemDataID: String): PurchaseOrderList!

    """Get Verse Comments by Verse ID"""
    verseComments(
        verseID: String!
        limit: Int
        offset: Int
    ): [VerseComment!]!

    """Get Notifications by MessageType and toUser"""
    notifications(
        messageType: String!
        toUser: String!
        limit: Int
        offset: Int
    ): NotificationsInfo!
}