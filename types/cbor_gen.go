// Code generated by github.com/whyrusleeping/cbor-gen. DO NOT EDIT.

package types

import (
	"fmt"
	"io"
	"math"
	"sort"

	cid "github.com/ipfs/go-cid"
	cbg "github.com/whyrusleeping/cbor-gen"
	xerrors "golang.org/x/xerrors"
)

var _ = xerrors.Errorf
var _ = cid.Undef
var _ = math.E
var _ = sort.Sort

func (t *OrderIndex) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{161}); err != nil {
		return err
	}

	// t.All (string) (string)
	if len("All") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"All\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("All"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("All")); err != nil {
		return err
	}

	if len(t.All) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.All was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.All))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.All)); err != nil {
		return err
	}
	return nil
}

func (t *OrderIndex) UnmarshalCBOR(r io.Reader) (err error) {
	*t = OrderIndex{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("OrderIndex: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.All (string) (string)
		case "All":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.All = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *OrderShardInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{166}); err != nil {
		return err
	}

	// t.ShardId (uint64) (uint64)
	if len("ShardId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ShardId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ShardId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ShardId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.ShardId)); err != nil {
		return err
	}

	// t.Peer (string) (string)
	if len("Peer") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Peer\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Peer"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Peer")); err != nil {
		return err
	}

	if len(t.Peer) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Peer was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Peer))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Peer)); err != nil {
		return err
	}

	// t.Cid (string) (string)
	if len("Cid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Cid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Cid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Cid")); err != nil {
		return err
	}

	if len(t.Cid) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Cid was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Cid))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Cid)); err != nil {
		return err
	}

	// t.Provider (string) (string)
	if len("Provider") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Provider\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Provider"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Provider")); err != nil {
		return err
	}

	if len(t.Provider) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Provider was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Provider))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Provider)); err != nil {
		return err
	}

	// t.State (types.OrderShardState) (string)
	if len("State") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"State\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("State"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("State")); err != nil {
		return err
	}

	if len(t.State) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.State was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.State))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.State)); err != nil {
		return err
	}

	// t.CompleteHash (string) (string)
	if len("CompleteHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CompleteHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CompleteHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CompleteHash")); err != nil {
		return err
	}

	if len(t.CompleteHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CompleteHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CompleteHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CompleteHash)); err != nil {
		return err
	}
	return nil
}

func (t *OrderShardInfo) UnmarshalCBOR(r io.Reader) (err error) {
	*t = OrderShardInfo{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("OrderShardInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.ShardId (uint64) (uint64)
		case "ShardId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.ShardId = uint64(extra)

			}
			// t.Peer (string) (string)
		case "Peer":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Peer = string(sval)
			}
			// t.Cid (string) (string)
		case "Cid":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Cid = string(sval)
			}
			// t.Provider (string) (string)
		case "Provider":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Provider = string(sval)
			}
			// t.State (types.OrderShardState) (string)
		case "State":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.State = OrderShardState(sval)
			}
			// t.CompleteHash (string) (string)
		case "CompleteHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CompleteHash = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *OrderInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{173}); err != nil {
		return err
	}

	// t.DataId (string) (string)
	if len("DataId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DataId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DataId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DataId")); err != nil {
		return err
	}

	if len(t.DataId) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.DataId was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.DataId))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.DataId)); err != nil {
		return err
	}

	// t.Owner (string) (string)
	if len("Owner") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Owner\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Owner"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Owner")); err != nil {
		return err
	}

	if len(t.Owner) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Owner was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Owner))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Owner)); err != nil {
		return err
	}

	// t.Cid (cid.Cid) (struct)
	if len("Cid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Cid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Cid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Cid")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Cid); err != nil {
		return xerrors.Errorf("failed to write cid field t.Cid: %w", err)
	}

	// t.StagePath (string) (string)
	if len("StagePath") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"StagePath\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("StagePath"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("StagePath")); err != nil {
		return err
	}

	if len(t.StagePath) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.StagePath was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.StagePath))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.StagePath)); err != nil {
		return err
	}

	// t.Proposal ([]uint8) (slice)
	if len("Proposal") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Proposal\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Proposal"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Proposal")); err != nil {
		return err
	}

	if len(t.Proposal) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Proposal was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Proposal))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Proposal[:]); err != nil {
		return err
	}

	// t.JwsSignature ([]uint8) (slice)
	if len("JwsSignature") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"JwsSignature\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("JwsSignature"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("JwsSignature")); err != nil {
		return err
	}

	if len(t.JwsSignature) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.JwsSignature was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.JwsSignature))); err != nil {
		return err
	}

	if _, err := cw.Write(t.JwsSignature[:]); err != nil {
		return err
	}

	// t.OrderId (uint64) (uint64)
	if len("OrderId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderId)); err != nil {
		return err
	}

	// t.OrderHash (string) (string)
	if len("OrderHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderHash")); err != nil {
		return err
	}

	if len(t.OrderHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.OrderHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.OrderHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.OrderHash)); err != nil {
		return err
	}

	// t.OrderTxType (types.AssignTxType) (string)
	if len("OrderTxType") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderTxType\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderTxType"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderTxType")); err != nil {
		return err
	}

	if len(t.OrderTxType) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.OrderTxType was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.OrderTxType))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.OrderTxType)); err != nil {
		return err
	}

	// t.OrderHeight (int64) (int64)
	if len("OrderHeight") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderHeight\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderHeight"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderHeight")); err != nil {
		return err
	}

	if t.OrderHeight >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderHeight)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.OrderHeight-1)); err != nil {
			return err
		}
	}

	// t.Shards (map[string]types.OrderShardInfo) (map)
	if len("Shards") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Shards\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Shards"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Shards")); err != nil {
		return err
	}

	{
		if len(t.Shards) > 4096 {
			return xerrors.Errorf("cannot marshal t.Shards map too large")
		}

		if err := cw.WriteMajorTypeHeader(cbg.MajMap, uint64(len(t.Shards))); err != nil {
			return err
		}

		keys := make([]string, 0, len(t.Shards))
		for k := range t.Shards {
			keys = append(keys, k)
		}
		sort.Strings(keys)
		for _, k := range keys {
			v := t.Shards[k]

			if len(k) > cbg.MaxLength {
				return xerrors.Errorf("Value in field k was too long")
			}

			if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(k))); err != nil {
				return err
			}
			if _, err := io.WriteString(w, string(k)); err != nil {
				return err
			}

			if err := v.MarshalCBOR(cw); err != nil {
				return err
			}

		}
	}

	// t.State (types.OrderState) (uint64)
	if len("State") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"State\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("State"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("State")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.State)); err != nil {
		return err
	}

	// t.LastErr (string) (string)
	if len("LastErr") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"LastErr\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("LastErr"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("LastErr")); err != nil {
		return err
	}

	if len(t.LastErr) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.LastErr was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.LastErr))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.LastErr)); err != nil {
		return err
	}
	return nil
}

func (t *OrderInfo) UnmarshalCBOR(r io.Reader) (err error) {
	*t = OrderInfo{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("OrderInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.DataId (string) (string)
		case "DataId":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.DataId = string(sval)
			}
			// t.Owner (string) (string)
		case "Owner":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Owner = string(sval)
			}
			// t.Cid (cid.Cid) (struct)
		case "Cid":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Cid: %w", err)
				}

				t.Cid = c

			}
			// t.StagePath (string) (string)
		case "StagePath":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.StagePath = string(sval)
			}
			// t.Proposal ([]uint8) (slice)
		case "Proposal":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Proposal: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Proposal = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Proposal[:]); err != nil {
				return err
			}
			// t.JwsSignature ([]uint8) (slice)
		case "JwsSignature":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.JwsSignature: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.JwsSignature = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.JwsSignature[:]); err != nil {
				return err
			}
			// t.OrderId (uint64) (uint64)
		case "OrderId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OrderId = uint64(extra)

			}
			// t.OrderHash (string) (string)
		case "OrderHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.OrderHash = string(sval)
			}
			// t.OrderTxType (types.AssignTxType) (string)
		case "OrderTxType":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.OrderTxType = AssignTxType(sval)
			}
			// t.OrderHeight (int64) (int64)
		case "OrderHeight":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.OrderHeight = int64(extraI)
			}
			// t.Shards (map[string]types.OrderShardInfo) (map)
		case "Shards":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajMap {
				return fmt.Errorf("expected a map (major type 5)")
			}
			if extra > 4096 {
				return fmt.Errorf("t.Shards: map too large")
			}

			t.Shards = make(map[string]OrderShardInfo, extra)

			for i, l := 0, int(extra); i < l; i++ {

				var k string

				{
					sval, err := cbg.ReadString(cr)
					if err != nil {
						return err
					}

					k = string(sval)
				}

				var v OrderShardInfo

				{

					if err := v.UnmarshalCBOR(cr); err != nil {
						return xerrors.Errorf("unmarshaling v: %w", err)
					}

				}

				t.Shards[k] = v

			}
			// t.State (types.OrderState) (uint64)
		case "State":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.State = OrderState(extra)

			}
			// t.LastErr (string) (string)
		case "LastErr":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.LastErr = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardKey) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.OrderId (uint64) (uint64)
	if len("OrderId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderId)); err != nil {
		return err
	}

	// t.Cid (cid.Cid) (struct)
	if len("Cid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Cid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Cid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Cid")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Cid); err != nil {
		return xerrors.Errorf("failed to write cid field t.Cid: %w", err)
	}

	return nil
}

func (t *ShardKey) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardKey{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardKey: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.OrderId (uint64) (uint64)
		case "OrderId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OrderId = uint64(extra)

			}
			// t.Cid (cid.Cid) (struct)
		case "Cid":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Cid: %w", err)
				}

				t.Cid = c

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardInfo) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{172}); err != nil {
		return err
	}

	// t.OrderId (uint64) (uint64)
	if len("OrderId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderId)); err != nil {
		return err
	}

	// t.DataId (string) (string)
	if len("DataId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DataId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DataId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DataId")); err != nil {
		return err
	}

	if len(t.DataId) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.DataId was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.DataId))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.DataId)); err != nil {
		return err
	}

	// t.Cid (cid.Cid) (struct)
	if len("Cid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Cid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Cid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Cid")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Cid); err != nil {
		return xerrors.Errorf("failed to write cid field t.Cid: %w", err)
	}

	// t.Owner (string) (string)
	if len("Owner") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Owner\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Owner"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Owner")); err != nil {
		return err
	}

	if len(t.Owner) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Owner was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Owner))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Owner)); err != nil {
		return err
	}

	// t.Gateway (string) (string)
	if len("Gateway") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Gateway\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Gateway"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Gateway")); err != nil {
		return err
	}

	if len(t.Gateway) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Gateway was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Gateway))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Gateway)); err != nil {
		return err
	}

	// t.OrderOperation (string) (string)
	if len("OrderOperation") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderOperation\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderOperation"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderOperation")); err != nil {
		return err
	}

	if len(t.OrderOperation) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.OrderOperation was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.OrderOperation))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.OrderOperation)); err != nil {
		return err
	}

	// t.ShardOperation (string) (string)
	if len("ShardOperation") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ShardOperation\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ShardOperation"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ShardOperation")); err != nil {
		return err
	}

	if len(t.ShardOperation) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.ShardOperation was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.ShardOperation))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.ShardOperation)); err != nil {
		return err
	}

	// t.CompleteHash (string) (string)
	if len("CompleteHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CompleteHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CompleteHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CompleteHash")); err != nil {
		return err
	}

	if len(t.CompleteHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CompleteHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CompleteHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CompleteHash)); err != nil {
		return err
	}

	// t.CompleteHeight (int64) (int64)
	if len("CompleteHeight") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CompleteHeight\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CompleteHeight"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CompleteHeight")); err != nil {
		return err
	}

	if t.CompleteHeight >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CompleteHeight)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CompleteHeight-1)); err != nil {
			return err
		}
	}

	// t.Size (uint64) (uint64)
	if len("Size") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Size\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Size"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Size")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Size)); err != nil {
		return err
	}

	// t.State (types.ShardState) (uint64)
	if len("State") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"State\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("State"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("State")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.State)); err != nil {
		return err
	}

	// t.LastErr (string) (string)
	if len("LastErr") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"LastErr\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("LastErr"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("LastErr")); err != nil {
		return err
	}

	if len(t.LastErr) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.LastErr was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.LastErr))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.LastErr)); err != nil {
		return err
	}
	return nil
}

func (t *ShardInfo) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardInfo{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardInfo: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.OrderId (uint64) (uint64)
		case "OrderId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OrderId = uint64(extra)

			}
			// t.DataId (string) (string)
		case "DataId":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.DataId = string(sval)
			}
			// t.Cid (cid.Cid) (struct)
		case "Cid":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Cid: %w", err)
				}

				t.Cid = c

			}
			// t.Owner (string) (string)
		case "Owner":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Owner = string(sval)
			}
			// t.Gateway (string) (string)
		case "Gateway":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Gateway = string(sval)
			}
			// t.OrderOperation (string) (string)
		case "OrderOperation":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.OrderOperation = string(sval)
			}
			// t.ShardOperation (string) (string)
		case "ShardOperation":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.ShardOperation = string(sval)
			}
			// t.CompleteHash (string) (string)
		case "CompleteHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CompleteHash = string(sval)
			}
			// t.CompleteHeight (int64) (int64)
		case "CompleteHeight":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CompleteHeight = int64(extraI)
			}
			// t.Size (uint64) (uint64)
		case "Size":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Size = uint64(extra)

			}
			// t.State (types.ShardState) (uint64)
		case "State":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.State = ShardState(extra)

			}
			// t.LastErr (string) (string)
		case "LastErr":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.LastErr = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardIndex) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{161}); err != nil {
		return err
	}

	// t.All ([]types.ShardKey) (slice)
	if len("All") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"All\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("All"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("All")); err != nil {
		return err
	}

	if len(t.All) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.All was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.All))); err != nil {
		return err
	}
	for _, v := range t.All {
		if err := v.MarshalCBOR(cw); err != nil {
			return err
		}
	}
	return nil
}

func (t *ShardIndex) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardIndex{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardIndex: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.All ([]types.ShardKey) (slice)
		case "All":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.All: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.All = make([]ShardKey, extra)
			}

			for i := 0; i < int(extra); i++ {

				var v ShardKey
				if err := v.UnmarshalCBOR(cr); err != nil {
					return err
				}

				t.All[i] = v
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *QueryProposal) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{168}); err != nil {
		return err
	}

	// t.Owner (string) (string)
	if len("Owner") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Owner\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Owner"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Owner")); err != nil {
		return err
	}

	if len(t.Owner) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Owner was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Owner))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Owner)); err != nil {
		return err
	}

	// t.Keyword (string) (string)
	if len("Keyword") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Keyword\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Keyword"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Keyword")); err != nil {
		return err
	}

	if len(t.Keyword) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Keyword was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Keyword))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Keyword)); err != nil {
		return err
	}

	// t.GroupId (string) (string)
	if len("GroupId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"GroupId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("GroupId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("GroupId")); err != nil {
		return err
	}

	if len(t.GroupId) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.GroupId was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.GroupId))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.GroupId)); err != nil {
		return err
	}

	// t.KeywordType (uint64) (uint64)
	if len("KeywordType") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"KeywordType\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("KeywordType"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("KeywordType")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.KeywordType)); err != nil {
		return err
	}

	// t.LastValidHeight (uint64) (uint64)
	if len("LastValidHeight") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"LastValidHeight\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("LastValidHeight"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("LastValidHeight")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.LastValidHeight)); err != nil {
		return err
	}

	// t.Gateway (string) (string)
	if len("Gateway") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Gateway\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Gateway"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Gateway")); err != nil {
		return err
	}

	if len(t.Gateway) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Gateway was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Gateway))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Gateway)); err != nil {
		return err
	}

	// t.CommitId (string) (string)
	if len("CommitId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CommitId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CommitId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CommitId")); err != nil {
		return err
	}

	if len(t.CommitId) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CommitId was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CommitId))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CommitId)); err != nil {
		return err
	}

	// t.Version (string) (string)
	if len("Version") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Version\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Version"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Version")); err != nil {
		return err
	}

	if len(t.Version) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Version was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Version))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Version)); err != nil {
		return err
	}
	return nil
}

func (t *QueryProposal) UnmarshalCBOR(r io.Reader) (err error) {
	*t = QueryProposal{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("QueryProposal: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Owner (string) (string)
		case "Owner":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Owner = string(sval)
			}
			// t.Keyword (string) (string)
		case "Keyword":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Keyword = string(sval)
			}
			// t.GroupId (string) (string)
		case "GroupId":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.GroupId = string(sval)
			}
			// t.KeywordType (uint64) (uint64)
		case "KeywordType":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.KeywordType = uint64(extra)

			}
			// t.LastValidHeight (uint64) (uint64)
		case "LastValidHeight":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.LastValidHeight = uint64(extra)

			}
			// t.Gateway (string) (string)
		case "Gateway":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Gateway = string(sval)
			}
			// t.CommitId (string) (string)
		case "CommitId":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CommitId = string(sval)
			}
			// t.Version (string) (string)
		case "Version":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Version = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *JwsSignature) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Protected (string) (string)
	if len("Protected") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Protected\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Protected"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Protected")); err != nil {
		return err
	}

	if len(t.Protected) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Protected was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Protected))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Protected)); err != nil {
		return err
	}

	// t.Signature (string) (string)
	if len("Signature") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Signature\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Signature"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Signature")); err != nil {
		return err
	}

	if len(t.Signature) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Signature was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Signature))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Signature)); err != nil {
		return err
	}
	return nil
}

func (t *JwsSignature) UnmarshalCBOR(r io.Reader) (err error) {
	*t = JwsSignature{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("JwsSignature: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Protected (string) (string)
		case "Protected":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Protected = string(sval)
			}
			// t.Signature (string) (string)
		case "Signature":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Signature = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *MetadataProposalCbor) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Proposal (types.QueryProposal) (struct)
	if len("Proposal") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Proposal\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Proposal"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Proposal")); err != nil {
		return err
	}

	if err := t.Proposal.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.JwsSignature (types.JwsSignature) (struct)
	if len("JwsSignature") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"JwsSignature\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("JwsSignature"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("JwsSignature")); err != nil {
		return err
	}

	if err := t.JwsSignature.MarshalCBOR(cw); err != nil {
		return err
	}
	return nil
}

func (t *MetadataProposalCbor) UnmarshalCBOR(r io.Reader) (err error) {
	*t = MetadataProposalCbor{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("MetadataProposalCbor: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Proposal (types.QueryProposal) (struct)
		case "Proposal":

			{

				if err := t.Proposal.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Proposal: %w", err)
				}

			}
			// t.JwsSignature (types.JwsSignature) (struct)
		case "JwsSignature":

			{

				if err := t.JwsSignature.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.JwsSignature: %w", err)
				}

			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardAssignReq) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{166}); err != nil {
		return err
	}

	// t.OrderId (uint64) (uint64)
	if len("OrderId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderId)); err != nil {
		return err
	}

	// t.DataId (string) (string)
	if len("DataId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DataId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DataId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DataId")); err != nil {
		return err
	}

	if len(t.DataId) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.DataId was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.DataId))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.DataId)); err != nil {
		return err
	}

	// t.Assignee (string) (string)
	if len("Assignee") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Assignee\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Assignee"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Assignee")); err != nil {
		return err
	}

	if len(t.Assignee) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Assignee was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Assignee))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Assignee)); err != nil {
		return err
	}

	// t.TxHash (string) (string)
	if len("TxHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"TxHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("TxHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("TxHash")); err != nil {
		return err
	}

	if len(t.TxHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.TxHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.TxHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.TxHash)); err != nil {
		return err
	}

	// t.Height (int64) (int64)
	if len("Height") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Height\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Height"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Height")); err != nil {
		return err
	}

	if t.Height >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Height)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Height-1)); err != nil {
			return err
		}
	}

	// t.AssignTxType (types.AssignTxType) (string)
	if len("AssignTxType") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"AssignTxType\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("AssignTxType"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("AssignTxType")); err != nil {
		return err
	}

	if len(t.AssignTxType) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.AssignTxType was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.AssignTxType))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.AssignTxType)); err != nil {
		return err
	}
	return nil
}

func (t *ShardAssignReq) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardAssignReq{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardAssignReq: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.OrderId (uint64) (uint64)
		case "OrderId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OrderId = uint64(extra)

			}
			// t.DataId (string) (string)
		case "DataId":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.DataId = string(sval)
			}
			// t.Assignee (string) (string)
		case "Assignee":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Assignee = string(sval)
			}
			// t.TxHash (string) (string)
		case "TxHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.TxHash = string(sval)
			}
			// t.Height (int64) (int64)
		case "Height":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Height = int64(extraI)
			}
			// t.AssignTxType (types.AssignTxType) (string)
		case "AssignTxType":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.AssignTxType = AssignTxType(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardAssignResp) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{162}); err != nil {
		return err
	}

	// t.Code (uint64) (uint64)
	if len("Code") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Code\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Code"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Code")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Code)); err != nil {
		return err
	}

	// t.Message (string) (string)
	if len("Message") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Message\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Message"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Message")); err != nil {
		return err
	}

	if len(t.Message) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Message was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Message))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Message)); err != nil {
		return err
	}
	return nil
}

func (t *ShardAssignResp) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardAssignResp{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardAssignResp: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Code (uint64) (uint64)
		case "Code":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Code = uint64(extra)

			}
			// t.Message (string) (string)
		case "Message":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Message = string(sval)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardCompleteReq) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{165}); err != nil {
		return err
	}

	// t.OrderId (uint64) (uint64)
	if len("OrderId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderId)); err != nil {
		return err
	}

	// t.DataId (string) (string)
	if len("DataId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DataId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DataId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DataId")); err != nil {
		return err
	}

	if len(t.DataId) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.DataId was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.DataId))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.DataId)); err != nil {
		return err
	}

	// t.Cids ([]cid.Cid) (slice)
	if len("Cids") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Cids\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Cids"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Cids")); err != nil {
		return err
	}

	if len(t.Cids) > cbg.MaxLength {
		return xerrors.Errorf("Slice value in field t.Cids was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajArray, uint64(len(t.Cids))); err != nil {
		return err
	}
	for _, v := range t.Cids {
		if err := cbg.WriteCid(w, v); err != nil {
			return xerrors.Errorf("failed writing cid field t.Cids: %w", err)
		}
	}

	// t.TxHash (string) (string)
	if len("TxHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"TxHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("TxHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("TxHash")); err != nil {
		return err
	}

	if len(t.TxHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.TxHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.TxHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.TxHash)); err != nil {
		return err
	}

	// t.Height (int64) (int64)
	if len("Height") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Height\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Height"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Height")); err != nil {
		return err
	}

	if t.Height >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Height)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.Height-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *ShardCompleteReq) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardCompleteReq{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardCompleteReq: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.OrderId (uint64) (uint64)
		case "OrderId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OrderId = uint64(extra)

			}
			// t.DataId (string) (string)
		case "DataId":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.DataId = string(sval)
			}
			// t.Cids ([]cid.Cid) (slice)
		case "Cids":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.MaxLength {
				return fmt.Errorf("t.Cids: array too large (%d)", extra)
			}

			if maj != cbg.MajArray {
				return fmt.Errorf("expected cbor array")
			}

			if extra > 0 {
				t.Cids = make([]cid.Cid, extra)
			}

			for i := 0; i < int(extra); i++ {

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("reading cid field t.Cids failed: %w", err)
				}
				t.Cids[i] = c
			}

			// t.TxHash (string) (string)
		case "TxHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.TxHash = string(sval)
			}
			// t.Height (int64) (int64)
		case "Height":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.Height = int64(extraI)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardCompleteResp) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{163}); err != nil {
		return err
	}

	// t.Code (uint64) (uint64)
	if len("Code") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Code\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Code"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Code")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Code)); err != nil {
		return err
	}

	// t.Message (string) (string)
	if len("Message") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Message\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Message"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Message")); err != nil {
		return err
	}

	if len(t.Message) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Message was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Message))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Message)); err != nil {
		return err
	}

	// t.Recoverable (bool) (bool)
	if len("Recoverable") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Recoverable\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Recoverable"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Recoverable")); err != nil {
		return err
	}

	if err := cbg.WriteBool(w, t.Recoverable); err != nil {
		return err
	}
	return nil
}

func (t *ShardCompleteResp) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardCompleteResp{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardCompleteResp: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Code (uint64) (uint64)
		case "Code":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Code = uint64(extra)

			}
			// t.Message (string) (string)
		case "Message":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Message = string(sval)
			}
			// t.Recoverable (bool) (bool)
		case "Recoverable":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}
			if maj != cbg.MajOther {
				return fmt.Errorf("booleans must be major type 7")
			}
			switch extra {
			case 20:
				t.Recoverable = false
			case 21:
				t.Recoverable = true
			default:
				return fmt.Errorf("booleans are either major type 7, value 20 or 21 (got %d)", extra)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardLoadReq) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{165}); err != nil {
		return err
	}

	// t.Owner (string) (string)
	if len("Owner") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Owner\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Owner"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Owner")); err != nil {
		return err
	}

	if len(t.Owner) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Owner was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Owner))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Owner)); err != nil {
		return err
	}

	// t.OrderId (uint64) (uint64)
	if len("OrderId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderId)); err != nil {
		return err
	}

	// t.Cid (cid.Cid) (struct)
	if len("Cid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Cid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Cid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Cid")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Cid); err != nil {
		return xerrors.Errorf("failed to write cid field t.Cid: %w", err)
	}

	// t.Proposal (types.MetadataProposalCbor) (struct)
	if len("Proposal") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Proposal\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Proposal"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Proposal")); err != nil {
		return err
	}

	if err := t.Proposal.MarshalCBOR(cw); err != nil {
		return err
	}

	// t.RequestId (int64) (int64)
	if len("RequestId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"RequestId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("RequestId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("RequestId")); err != nil {
		return err
	}

	if t.RequestId >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.RequestId)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.RequestId-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *ShardLoadReq) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardLoadReq{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardLoadReq: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Owner (string) (string)
		case "Owner":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Owner = string(sval)
			}
			// t.OrderId (uint64) (uint64)
		case "OrderId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OrderId = uint64(extra)

			}
			// t.Cid (cid.Cid) (struct)
		case "Cid":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Cid: %w", err)
				}

				t.Cid = c

			}
			// t.Proposal (types.MetadataProposalCbor) (struct)
		case "Proposal":

			{

				if err := t.Proposal.UnmarshalCBOR(cr); err != nil {
					return xerrors.Errorf("unmarshaling t.Proposal: %w", err)
				}

			}
			// t.RequestId (int64) (int64)
		case "RequestId":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.RequestId = int64(extraI)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardLoadResp) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{167}); err != nil {
		return err
	}

	// t.Code (uint64) (uint64)
	if len("Code") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Code\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Code"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Code")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Code)); err != nil {
		return err
	}

	// t.Message (string) (string)
	if len("Message") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Message\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Message"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Message")); err != nil {
		return err
	}

	if len(t.Message) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Message was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Message))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Message)); err != nil {
		return err
	}

	// t.OrderId (uint64) (uint64)
	if len("OrderId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderId)); err != nil {
		return err
	}

	// t.Cid (cid.Cid) (struct)
	if len("Cid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Cid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Cid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Cid")); err != nil {
		return err
	}

	if err := cbg.WriteCid(cw, t.Cid); err != nil {
		return xerrors.Errorf("failed to write cid field t.Cid: %w", err)
	}

	// t.Content ([]uint8) (slice)
	if len("Content") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Content\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Content"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Content")); err != nil {
		return err
	}

	if len(t.Content) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Content was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Content))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Content[:]); err != nil {
		return err
	}

	// t.RequestId (int64) (int64)
	if len("RequestId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"RequestId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("RequestId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("RequestId")); err != nil {
		return err
	}

	if t.RequestId >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.RequestId)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.RequestId-1)); err != nil {
			return err
		}
	}

	// t.ResponseId (int64) (int64)
	if len("ResponseId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"ResponseId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("ResponseId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("ResponseId")); err != nil {
		return err
	}

	if t.ResponseId >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.ResponseId)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.ResponseId-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *ShardLoadResp) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardLoadResp{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardLoadResp: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Code (uint64) (uint64)
		case "Code":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Code = uint64(extra)

			}
			// t.Message (string) (string)
		case "Message":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Message = string(sval)
			}
			// t.OrderId (uint64) (uint64)
		case "OrderId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OrderId = uint64(extra)

			}
			// t.Cid (cid.Cid) (struct)
		case "Cid":

			{

				c, err := cbg.ReadCid(cr)
				if err != nil {
					return xerrors.Errorf("failed to read cid field t.Cid: %w", err)
				}

				t.Cid = c

			}
			// t.Content ([]uint8) (slice)
		case "Content":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Content: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Content = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Content[:]); err != nil {
				return err
			}
			// t.RequestId (int64) (int64)
		case "RequestId":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.RequestId = int64(extraI)
			}
			// t.ResponseId (int64) (int64)
		case "ResponseId":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.ResponseId = int64(extraI)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardMigrateReq) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{167}); err != nil {
		return err
	}

	// t.MigrateFrom (string) (string)
	if len("MigrateFrom") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"MigrateFrom\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("MigrateFrom"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("MigrateFrom")); err != nil {
		return err
	}

	if len(t.MigrateFrom) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.MigrateFrom was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.MigrateFrom))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.MigrateFrom)); err != nil {
		return err
	}

	// t.OrderId (uint64) (uint64)
	if len("OrderId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"OrderId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("OrderId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("OrderId")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.OrderId)); err != nil {
		return err
	}

	// t.DataId (string) (string)
	if len("DataId") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"DataId\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("DataId"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("DataId")); err != nil {
		return err
	}

	if len(t.DataId) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.DataId was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.DataId))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.DataId)); err != nil {
		return err
	}

	// t.TxHash (string) (string)
	if len("TxHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"TxHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("TxHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("TxHash")); err != nil {
		return err
	}

	if len(t.TxHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.TxHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.TxHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.TxHash)); err != nil {
		return err
	}

	// t.TxHeight (int64) (int64)
	if len("TxHeight") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"TxHeight\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("TxHeight"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("TxHeight")); err != nil {
		return err
	}

	if t.TxHeight >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.TxHeight)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.TxHeight-1)); err != nil {
			return err
		}
	}

	// t.Cid (string) (string)
	if len("Cid") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Cid\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Cid"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Cid")); err != nil {
		return err
	}

	if len(t.Cid) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Cid was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Cid))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Cid)); err != nil {
		return err
	}

	// t.Content ([]uint8) (slice)
	if len("Content") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Content\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Content"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Content")); err != nil {
		return err
	}

	if len(t.Content) > cbg.ByteArrayMaxLen {
		return xerrors.Errorf("Byte array in field t.Content was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajByteString, uint64(len(t.Content))); err != nil {
		return err
	}

	if _, err := cw.Write(t.Content[:]); err != nil {
		return err
	}
	return nil
}

func (t *ShardMigrateReq) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardMigrateReq{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardMigrateReq: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.MigrateFrom (string) (string)
		case "MigrateFrom":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.MigrateFrom = string(sval)
			}
			// t.OrderId (uint64) (uint64)
		case "OrderId":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.OrderId = uint64(extra)

			}
			// t.DataId (string) (string)
		case "DataId":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.DataId = string(sval)
			}
			// t.TxHash (string) (string)
		case "TxHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.TxHash = string(sval)
			}
			// t.TxHeight (int64) (int64)
		case "TxHeight":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.TxHeight = int64(extraI)
			}
			// t.Cid (string) (string)
		case "Cid":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Cid = string(sval)
			}
			// t.Content ([]uint8) (slice)
		case "Content":

			maj, extra, err = cr.ReadHeader()
			if err != nil {
				return err
			}

			if extra > cbg.ByteArrayMaxLen {
				return fmt.Errorf("t.Content: byte array too large (%d)", extra)
			}
			if maj != cbg.MajByteString {
				return fmt.Errorf("expected byte array")
			}

			if extra > 0 {
				t.Content = make([]uint8, extra)
			}

			if _, err := io.ReadFull(cr, t.Content[:]); err != nil {
				return err
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
func (t *ShardMigrateResp) MarshalCBOR(w io.Writer) error {
	if t == nil {
		_, err := w.Write(cbg.CborNull)
		return err
	}

	cw := cbg.NewCborWriter(w)

	if _, err := cw.Write([]byte{164}); err != nil {
		return err
	}

	// t.Code (uint64) (uint64)
	if len("Code") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Code\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Code"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Code")); err != nil {
		return err
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.Code)); err != nil {
		return err
	}

	// t.Message (string) (string)
	if len("Message") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"Message\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("Message"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("Message")); err != nil {
		return err
	}

	if len(t.Message) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.Message was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.Message))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.Message)); err != nil {
		return err
	}

	// t.CompleteHash (string) (string)
	if len("CompleteHash") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CompleteHash\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CompleteHash"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CompleteHash")); err != nil {
		return err
	}

	if len(t.CompleteHash) > cbg.MaxLength {
		return xerrors.Errorf("Value in field t.CompleteHash was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len(t.CompleteHash))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string(t.CompleteHash)); err != nil {
		return err
	}

	// t.CompleteHeight (int64) (int64)
	if len("CompleteHeight") > cbg.MaxLength {
		return xerrors.Errorf("Value in field \"CompleteHeight\" was too long")
	}

	if err := cw.WriteMajorTypeHeader(cbg.MajTextString, uint64(len("CompleteHeight"))); err != nil {
		return err
	}
	if _, err := io.WriteString(w, string("CompleteHeight")); err != nil {
		return err
	}

	if t.CompleteHeight >= 0 {
		if err := cw.WriteMajorTypeHeader(cbg.MajUnsignedInt, uint64(t.CompleteHeight)); err != nil {
			return err
		}
	} else {
		if err := cw.WriteMajorTypeHeader(cbg.MajNegativeInt, uint64(-t.CompleteHeight-1)); err != nil {
			return err
		}
	}
	return nil
}

func (t *ShardMigrateResp) UnmarshalCBOR(r io.Reader) (err error) {
	*t = ShardMigrateResp{}

	cr := cbg.NewCborReader(r)

	maj, extra, err := cr.ReadHeader()
	if err != nil {
		return err
	}
	defer func() {
		if err == io.EOF {
			err = io.ErrUnexpectedEOF
		}
	}()

	if maj != cbg.MajMap {
		return fmt.Errorf("cbor input should be of type map")
	}

	if extra > cbg.MaxLength {
		return fmt.Errorf("ShardMigrateResp: map struct too large (%d)", extra)
	}

	var name string
	n := extra

	for i := uint64(0); i < n; i++ {

		{
			sval, err := cbg.ReadString(cr)
			if err != nil {
				return err
			}

			name = string(sval)
		}

		switch name {
		// t.Code (uint64) (uint64)
		case "Code":

			{

				maj, extra, err = cr.ReadHeader()
				if err != nil {
					return err
				}
				if maj != cbg.MajUnsignedInt {
					return fmt.Errorf("wrong type for uint64 field")
				}
				t.Code = uint64(extra)

			}
			// t.Message (string) (string)
		case "Message":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.Message = string(sval)
			}
			// t.CompleteHash (string) (string)
		case "CompleteHash":

			{
				sval, err := cbg.ReadString(cr)
				if err != nil {
					return err
				}

				t.CompleteHash = string(sval)
			}
			// t.CompleteHeight (int64) (int64)
		case "CompleteHeight":
			{
				maj, extra, err := cr.ReadHeader()
				var extraI int64
				if err != nil {
					return err
				}
				switch maj {
				case cbg.MajUnsignedInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 positive overflow")
					}
				case cbg.MajNegativeInt:
					extraI = int64(extra)
					if extraI < 0 {
						return fmt.Errorf("int64 negative oveflow")
					}
					extraI = -1 - extraI
				default:
					return fmt.Errorf("wrong type for int64 field: %d", maj)
				}

				t.CompleteHeight = int64(extraI)
			}

		default:
			// Field doesn't exist on this type, so ignore it
			cbg.ScanForLinks(r, func(cid.Cid) {})
		}
	}

	return nil
}
